Variable Types:
1. Number 
  NaN: not a number
2. String
  10 + "34" -> "1034"
  10 - "3" -> 7
3. Boolean
  3 === 3 -> true (same type and value)
4. Undefined
  Variable has not been assigned 
5. Null
  Nothing in the object
6. Symbol (new in ECMAScript 6)
7. Object

var storedVal = prompt("Prompt phrase: "); -> will store as a string
Cast a string to number: Number(storedVal)

let varName (let: new in ECMAScript 6)

Anonymous function:
var hello = function() {
  console.log("Hi");
}

More info in: w3c array methods
  ary.shift(): remove front
  ary.pop(): remove back
  ary.push(): append 
  ary.concat([1, 2, 3]);
  ary.sort();
  ary.length
  
Object: collection of properties {} -> like a struct
  access to a property: obj.property;
  add a new property: obj.addProperty = "newProperty";
  function inside an object: method
  var obj = {
    methodA: function() {
    }
  };
  obj.methodA()

A list of objects
  [{},{},...]
  listObj[index].property

forEach usage:
ary.forEach(function(value) {
  console.log(value);
}
===================================
ary.forEach(function(value, index) {
  console.log(value, index);
}
===================================
function functionName(value, index) {
  console.log(value, index);
}

ary.forEach(functionName);

DOM: Document Object Model (document)
- what browser creates to allow us to modify HTML and CSS
- document is just an object (its parent object is window)
- window.alert("hello")
- document.write("hello") (window.write("hello") would not work)

JavaScript engine

DOM selectors:
1. getElementsByTagName
   document.getElementsByTagName("")
2. getElementsById -> only one 
3. getElementsByClassName -> returns an array -> use [index] after

===================================
RECOMMENDED
4. document.querySelector(" ") -> select first item
   document.querySelectorAll(" ") -> select all items
===================================
5. document.querySelector("li").getAttribute("name")
6. document.querySelector("li").setAttribute("name", "value")

Change styles:
   document.querySelector("h1").style.property = ""; 
   Alternatively:
      1. className
        var h1 = document.querySelector("h1");
        h1.className = "assignedClassName";
      2. classList
        document.querySelector("li").classList;
        method contains: add/remove/toggle (on, off)

innerHTML (kinda dangerous)
  document.querySelector("h1").innerHTML = "<h1>hi</h1>";

parentElement
children

It is important to cache selectors in variables!!! -> store in a variable!

Add <script type="text/javascript" src="script.js"></script> at the end of body

// getElementsByTagName returns an array of elements
var button = document.getElementsByTagName("button")[0];
button.addEventListener("click", function() {
  console.log("click!");
}
event listener: mouseenter, mouseleave...etc

Create an element:
  var li = document.createElement("li");

Create a text node:
  li.appendChild(document.createTextNode(input.value);

Attach:
  ul.appendChild(li);

JavaScript Char Codes (key codes): https://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes
Event Reference: https://developer.mozilla.org/en-US/docs/Web/Events

Callback function:
  input.addEventListener("keypress", addListAfterKeyPress)
  addListAfterKeyPress is a callback function. When the key is pressed, the function automatically gets called. 
  
  
Ternary operator:
  eval ? option1 : option 2;
  
  Equivalent to:
  if (eval)
  {
    return option1;
  }
  else
  {
    return option2;
  }
  
  
ES6: ECMAScript6 === standard of JavaScript
BABEL: online JavaScript compiler. Transform new syntax to the one all browsers support. 
  
let/const (ECMAScript6)
  - let: any time is wrapped around a curly bracket, a new scope is created (DO NOT USE VAR)
  - const: not allowed to reassign (changing property is allowed for object)
  
Template strings:
  ` ${varName} ${varName-10} `
  
Default arguments (when parameters are not provided):
    function(name = "", var1 = 10, var2 = "hi") { return }
  
Symbol:
    let sym1 = Symbol();
    let sym2 = Symbol('foo');
    let sym3 = Symbol('foo');
    sym2 === sym3: false
 
Arrow functions:
    function add(a, b) {
      return a + b;
    }
    
    equivalent to:  
      const add = (a, b) => a + b;  // when there is only a single return 
===================================
Closures: 
A function ran, the function excecuted. 
It's never going to execute again, but it's going to remember that there are references to those variables.
So the child scope always has access to the parent scope. 

const first = () => {
  const greet = "Hi";
  const second = () => {
    alert(greet);
  }
  return second;
}

const newFunc = first();
newFunc();  // Hi
===================================
Currying:
Changing function to accept parameters one at a time. 

const multiply = (a, b) => a * b;
const curriedMultiply = (a) => (b) => a * b;
curriedMultiply(3)(4);

const multiplyBy5 = curriedMultiply(5);
multiplyBy5(10); // 50
===================================
Compose:
const compose = (f, g) => (a) => f(g(a));
- f and g are functions

const sum = (num) => num + 1;
compose(sum, sum)(5);  // 7


Avoiding side effects and functional purity (determinism):
Side effect:
  var a = 1;
  function changeA() {
    a = 2;
  }

Advanced Arrays:
const array = [1, 2, 10, 16];
const double [];

// forEach: iterate 
const newArray = array.forEach((num) => {
  double.push(num * 2);
})
===================================
Map:
// expects operation to return
// creates a new array
const mapArray = array.map((num) => {
  return num * 2
});

// cleaner:
const mapArray = array.map(num => num * 2);
===================================
Filter:

const filterArray = array.filter(num => {
  return num > 5
});

// because it's single line:
const filterArray = array.filter(num => num > 5);
===================================
Reduce:
// Accumulator: 
const reduceArray = array.reduce((accumulator, num) => {
  return accumulator + num
}, starting_num)


Advanced Objects:
===================================
// Reference type: objects created by programmer
var object1 = {value: 10};
var object2 = object1; // object2 references object1 (same address)
var object3 = {value: 10};  // new object, different address

Arrays are just an object: [] === [] // false

// Context
Scope is created when there are curly brackets
Context: 
"this": what is the object environment that we are in 

// Instantiation
Making multiple copies of the object

class Player {
  constructor(name, type) {
    console.log(this); // wizard
    this.name = name;
    this.type = type;
  }
  introduce() {
    console.log(`Hi I am ${this.name}, I'm a ${this.type}`)
  }
}

// add on top of what Player has
class Wizard extends Player {
  constructor(name, type) {
    console.log(this);  // error: must call super constructor in derived class
                        // before accessing "this" or returning from derived constructor
    super(name, type) // have access to Player attributes
  }
  play() {
    console.log(`I'm a ${this.type}`);
  }
}

const wizard1 = new Wizard("Shelly", "Healer");
const wizard2 = new Wizard("Shawn", "Dark Magic");

ES7:
===================================
// .includes()
'hello'.includes('o'); // true

const pets = ['cat', 'dog', 'bat'];
pets.include('bird');  // false

// exponential
const square = (x) => x**2;


ES8:
===================================
.padStart() and .padEnd()
'Turtle'.padStart(10);  // 10 spaces inserted in front

const fun = (a,b,c,d,) => {
  console.log(a);
}
fun(1,2,3,4,); // still valid

Object.values
Object.entries
Object.keys

let obj = {
  username0: 'Santa',
  username1: 'Rudolf',
  username2: 'Mr.Grinch'
}

// iterate through object
Object.keys(obj).forEach((key, index) => {
  console.log(key, obj[key]);
})

Object.values(obj).forEach(value => {
  console.log(value);   // value of each object
});

Object.entries(obj).forEach(value => {
  console.log(value);   // array of value and property: [value, property]
});

Object.entries(obj).map(value => {
  // second item of array: property
  return value[1] + value[0].replace("username", ""); //replace username with blank (only number left)
})

Loops:
===================================
// Both arrays and strings are iterable

const basket = ["apple", "oranges", "grapes"]
const detailedBasket = {
  apples: 5,
  oranges: 10,
  grapes: 1000
}

// for of
// only works for iterables - arrays, strings
for (item of basket) {
  console.log(item)
}

// for in - properties
// enumerating - objects (not iterable)
for (item in detailedBasket) {
  console.log(item)
}
// for (item in basket) {...} -> 0, 1, 2



Async Await


  
